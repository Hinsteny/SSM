<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.spring.hinsteny</groupId>
	<artifactId>SSM</artifactId>
	<version>1.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>SSM</name>
	<url>https://github.com/Hinsteny/SSM</url>
    <description>spring-springmvc-mybatis-samples</description>
    <organization>
        <name>hinsteny.hisoka</name>
        <url>http://hinsteny.github.io/</url>
    </organization>
    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>
    <developers>
        <developer>
            <id>rwinch</id>
            <name>Hinsteny.Hisoka</name>
            <email>hinsteny@gmail.com</email>
        </developer>
    </developers>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jetty-maven-plugin.version>9.3.0.M1</jetty-maven-plugin.version>
		<tomcat7-maven-plugin.name>tomcat7-maven-plugin</tomcat7-maven-plugin.name>
		<tomcat7-maven-plugin.version>2.2</tomcat7-maven-plugin.version>
		<maven-compiler-plugin.version>3.5.1</maven-compiler-plugin.version>
		<maven-resources-plugin.version>2.7</maven-resources-plugin.version>
		<maven-dependency-plugin.version>2.10</maven-dependency-plugin.version>
		<maven-clean-plugin.version>2.6.1</maven-clean-plugin.version>

		<junit.version>4.12</junit.version>
		<javax.servlet-api.version>3.1.0</javax.servlet-api.version>
		<jstl.version>1.2</jstl.version>
		<hessian.version>4.0.38</hessian.version>
		<spring.version>4.3.1.RELEASE</spring.version>
		<spring-test.version>4.3.1.RELEASE</spring-test.version>
		<cglib.version>3.1</cglib.version>
		<aspectjrt.version>1.8.8</aspectjrt.version>
		<ehcache.version>3.0.0.m3</ehcache.version>
		<cache-api.version>1.0.0</cache-api.version>
		<spymemcached.version>2.12.0</spymemcached.version>
		<xmemcached.version>3.6.0</xmemcached.version>
		<mybatis.version>3.2.8</mybatis.version>
		<mybatis-spring.version>1.2.2</mybatis-spring.version>
		<persistence-api.version>1.0.2</persistence-api.version>
		<postgresql.version>9.4.1208</postgresql.version>
		<HikariCP.version>2.4.0</HikariCP.version>
		<spring-data-redis.version>1.7.0.RELEASE</spring-data-redis.version>
		<spring-data-mongodb.version>1.9.2.RELEASE</spring-data-mongodb.version>
		<redis.clients.version>2.8.0</redis.clients.version>
		<dom4j.version>1.6.1</dom4j.version>
		<commons-lang3.version>3.4</commons-lang3.version>
		<commons-fileupload.version>1.3.1</commons-fileupload.version>
		<guava.version>18.0</guava.version>
        <jackson-core.version>2.7.0</jackson-core.version>
		<jackson-mapper-asl.version>1.9.13</jackson-mapper-asl.version>
		<jackson-databind.version>2.5.2</jackson-databind.version>
		<javax.mail.version>1.5.2</javax.mail.version>
		<httpclient.version>4.5.1</httpclient.version>
		<scala-library.version>2.10.5</scala-library.version>
		<tomcat-jsp-api.version>8.0.21</tomcat-jsp-api.version>
		<beetl-core.version>2.2.3</beetl-core.version>
		<xstream.version>1.4.7</xstream.version>
        <spring-security-web.version>4.1.1.RELEASE</spring-security-web.version>
		<activemq-all.version>5.14.0</activemq-all.version>
		<groovy-all.version>2.4.4</groovy-all.version>
		<lombok.version>1.16.6</lombok.version>
		<slf4j-api.version>1.7.13</slf4j-api.version>
		<log4j.version>2.4.1</log4j.version>
	</properties>

	<build>
		<finalName>Hinsteny</finalName>
		<resources>
			<resource>
				<directory>src/main/java/org</directory>
				<targetPath>org</targetPath>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/java/com</directory>
				<targetPath>com</targetPath>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<plugins>
			<!-- enabling the mvn jetty:run -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty-maven-plugin.version}</version>
				<configuration>
					<!-- Uncomment to enable auto java class reload on java changes -->
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<webApp>
						<contextPath>/</contextPath>
						<tempDirectory>/tmpl</tempDirectory>
					</webApp>
				</configuration>
			</plugin>
			<!-- tomcat plugin mvn tomcat7:run -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>${tomcat7-maven-plugin.name}</artifactId>
				<version>${tomcat7-maven-plugin.version}</version>
			</plugin>
			<!-- maven clean -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven-clean-plugin.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>target/src/main/webapp/WEB-INF/lib</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<!-- maven compile -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<!-- maven project resources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<executions>
					<execution>
						<phase>compile</phase>
					</execution>
				</executions>
			</plugin>
			<!-- maven project dependency lib -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven-dependency-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<includeTypes>jar</includeTypes>
					<overWriteSnapshots>true</overWriteSnapshots>
					<type>jar</type>
					<outputDirectory>target/src/main/webapp/WEB-INF/lib</outputDirectory>
				</configuration>
			</plugin>

			<!--groovy compile plugin-->

		</plugins>
	</build>

	<dependencies>
		<!-- =========================== Junit test ======================== -->
		<!-- Junit test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<!--<scope>test</scope>-->
		</dependency>

		<!-- Spring TestContext Framework Person -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring-test.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- =========================== /Junit test ======================= -->

		<!-- ===================== Servlet And JSP ==================== -->
		<!-- java servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet-api.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- JSP Standard Tag Library -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>

		<!-- JSP package -->
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jsp-api</artifactId>
			<version>${tomcat-jsp-api.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Hessian is a compact binary protocol for connecting web services. -->
		<dependency>
			<groupId>com.caucho</groupId>
			<artifactId>hessian</artifactId>
			<version>${hessian.version}</version>
		</dependency>
		<!-- ===================== /Servlet And JSP =================== -->

		<!-- ======================= SpringMVC ======================= -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<exclusion>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
    	</dependency>
    
		<!-- Spring Web MVC -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Spring Object/Relational Mapping -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- Spring Object/Xml Convert -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>

        <!-- Spring JMS -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jms</artifactId>
            <version>${spring.version}</version>
        </dependency>
		<!-- Code Generation Library (dynamic proxy) -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>

		<!-- The runtime needed to execute a program using AspectJ -->
		<dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
			<version>${aspectjrt.version}</version>
		</dependency>

		<!-- ======================= /SpringMVC ======================= -->

		<!-- ===================== Cache api =================== -->
		<!--The ehcache3 model,Ehcache single jar, containing all modules-->
		<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${ehcache.version}</version>
		</dependency>
<!-- 
		The ehcache3 require the actual JSR-107 API
		<dependency>
			<groupId>javax.cache</groupId>
			<artifactId>cache-api</artifactId>
			<version>${cache-api.version}</version>
		</dependency>
		
		<dependency>
		  <groupId>org.terracotta</groupId>
		  <artifactId>management-model</artifactId>
		  <version>2.0.0</version>
		</dependency>
     -->
		<dependency>
			<groupId>org.terracotta</groupId>
			<artifactId>management-model</artifactId>
			<version>2.0.0</version>
		</dependency>
		<!-- A client library for memcached. -->
		<!--<dependency>-->
			<!--<groupId>net.spy</groupId>-->
			<!--<artifactId>spymemcached</artifactId>-->
			<!--<version>${spymemcached.version}</version>-->
		<!--</dependency>-->

		<!--&lt;!&ndash; Enables memcached caching in Spring beans via annotations. &ndash;&gt;-->
		<!--<dependency>-->
			<!--<groupId>com.google.code.simple-spring-memcached</groupId>-->
			<!--<artifactId>xmemcached-provider</artifactId>-->
			<!--<version>${xmemcached.version}</version>-->
	    <!--</dependency>-->
		<!-- ===================== /Cache api ================== -->

		<!-- ===================== /Data Persistence ================== -->
		<!-- The MyBatis data mapper framework makes it easier to use a relational 
			database with object-oriented applications. -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>

		<!-- >An easy-to-use Spring3 bridge for MyBatis sql mapping framework. -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis-spring.version}</version>
		</dependency>

		<!-- Javax persistence -->
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>${persistence-api.version}</version>
		</dependency>

		<!-- postgresql -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.version}</version>
		</dependency>

		<!-- HikariCP https://github.com/brettwooldridge/HikariCP -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>${HikariCP.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- spring-data-redis -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-redis</artifactId>
			<version>${spring-data-redis.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.springframework</groupId>
					<artifactId>spring-context-support</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- redis -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>${redis.clients.version}</version>
		</dependency>

		<!-- spring-data-mongo -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
			<version>${spring-data-mongodb.version}</version>
		</dependency>
		<!-- ===================== /Data Persistence ================== -->

		<!-- ===================== /log api, now use log4j-2  =================== -->
		<!-- slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j-api.version}</version>
		</dependency>
		<!-- If existing components use SLF4J and you want to have this logging routed to Log4j 2, then add the following but do not remove any SLF4J dependencies -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<!-- log4j-2-api -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j.version}</version>
		  </dependency>
		<!-- log4j-2-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<!-- log4j support and handle the ClassLoader environment and container lifecycle of a web application -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
			<version>${log4j.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- ===================== /log api =================== -->

		<!-- ===================== secure ================== -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring-security-web.version}</version>
		</dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security-web.version}</version>
        </dependency>
		<!-- ===================== / secure  =================== -->

		<!-- =====================  activeMQ ================== -->
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-all</artifactId>
			<version>${activemq-all.version}</version>
		</dependency>
        <!-- 上面的引入会额外引入slf4j, 因此拆分为下面的-->
        <!--<dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-broker</artifactId>
            <version>5.13.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-client</artifactId>
            <version>5.13.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activeio-core</artifactId>
            <version>3.1.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-kahadb-store</artifactId>
            <version>5.13.0</version>
        </dependency>-->
		<!-- ===================== / activeMQ ================== -->

		<!-- ===================== Some Good Tools =================== -->
		<!-- An easy to use, open source library for working with XML, XPath and 
			XSLT on the Java platform -->
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>${dom4j.version}</version>
		</dependency>

		<dependency>
			<groupId>com.thoughtworks.xstream</groupId>
			<artifactId>xstream</artifactId>
			<version>${xstream.version}</version>
		</dependency>

		<!-- Apache Commons-Lang provides these extra methods -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3.version}</version>
		</dependency>

		<!-- To add robust, high-performance, file upload capability to your servlets 
			and web applications -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${commons-fileupload.version}</version>
		</dependency>

		<!-- Guava is a suite of core and expanded libraries that include utility 
			classes, google's collections, io classes, and much much more. -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>

		<!-- Parent pom for all Jackson components -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson-core.version}</version>
		</dependency>

		<!-- Data Mapper package is a high-performance data binding package built on Jackson JSON processor -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson-mapper-asl.version}</version>
		</dependency>

		<!-- General data-binding functionality for Jackson: works on core streaming 
			API (Data transform) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson-databind.version}</version>
		</dependency>

		<!-- Sun mail Library -->
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>javax.mail</artifactId>
			<version>${javax.mail.version}</version>
		</dependency>

		<!-- Responsible for creating and maintaining a toolset of low level Java 
			components focused on HTTP and associated protocols -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpclient.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>fluent-hc</artifactId>
			<version>${httpclient.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
			<version>${httpclient.version}</version>
		</dependency>

		<!-- Sun mail Library -->
		<dependency>
			<groupId>org.beetl</groupId>
			<artifactId>beetl-core</artifactId>
			<version>${beetl-core.version}</version>
		</dependency>

		<!-- groovy compile Library -->
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-all</artifactId>
			<version>${groovy-all.version}</version>
		</dependency>

		<!-- lombok compile Library -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>
		<!-- ===================== /Some Good Tools =================== -->
	</dependencies>

	<repositories>
		<repository>
			<id>Sonatype Snapshot</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>
		<repository>
			<id>sonatype</id>
			<url>http://repository.sonatype.org/content/groups/public/</url>
		</repository>
	</repositories>

</project>
