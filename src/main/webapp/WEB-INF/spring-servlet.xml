<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.1.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
      http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd 
      http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring     
	  http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd">

    <!-- 参考文档  http://docs.spring.io/spring-framework/docs/4.0.x/spring-framework-reference/htmlsingle -->
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
  	<mvc:annotation-driven />
	<!-- 
	    mvc:annotation-driven 
	      3.2 之前              相当于注册了DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter两个bean 
	      3.2及之后               相当于注册了RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter两个bean
	-->
	<!-- 开启aop特性 -->
    <aop:aspectj-autoproxy />
    <!-- 开启事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 开启rest 注解 -->
	<bean class="com.hisoka.handler.RestAnnotationHandler"/>
	<!-- 开启 ehcahe-spring 注解 -->
    <!-- <cache:annotation-driven cache-manager="cacheManagerFactory"/> -->
    <!--开启表创建-->
	<!-- <bean class="org.moon.core.init.TableCreator"/> -->
	
		
    <!-- 扫描系统包下面的功能类-->
	<context:component-scan base-package="com.hisoka" />
	
	<!-- 扫描开发包下面的类-->
	<context:component-scan base-package="org.hinsteny" />
		
	<!-- 对静态资源拦截的处理 -->
	<mvc:resources mapping="*.html" location="/" />
    <mvc:resources mapping="/javascript/**" location="/static_resources/javascript/"/>  
    <mvc:resources mapping="/styles/**" location="/static_resources/css/"/>
    
    <!--把所有的请求引到到默认的servlet-->
	<mvc:default-servlet-handler />
	
    <!--异常捕获处理-->
	<bean class="com.hisoka.exception.ExceptionHandler"></bean>
	
	<!--使用 JSTl 处理 Jsp 页面-->
	 <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    
	<!-- 支持大文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		p:defaultEncoding="utf-8" />
	
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean id="requestMappingHandlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
            </list>
        </property>
    </bean>
    	
    <!--用于将sql后缀名请求转到json响应类型-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes" >
            <value>
                sql=application/json
            </value>
        </property>
    </bean>
    
	<!-- 自动装配mapper @see http://mybatis.github.io/spring/zh/mappers.html -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.hinsteny;com.hisoka" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
	</bean>
	
	<!-- cacheManager 需要 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="proxoolDataSource" />
		</property>
	</bean>
	
	<!-- the sessionFactory for mybatis -->
	<!-- @see http://mybatis.github.io/spring/zh/factorybean.html -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="/WEB-INF/config/Mybatis-Configuration.xml"/>
		<property name="dataSource" ref="proxoolDataSource" />
		<property name="mapperLocations" value="classpath*:/**/mapper/*Mapper.xml" />
        <!-- 如果扫描classpath*:/org/**/mapper/*.xml,则会扫描tomcat的catalina.jar下的xml文件，会报错（tomcat 8版本之前无匹配的xml，因此不会报错） -->
	</bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    
    <!-- 定义事务管理器（声明式的事务） -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="proxoolDataSource" />
    </bean>
    
	<!-- 缓存对象 ehcache -->
	<!-- <bean id="cacheManager" class="org.ehcache.EhcacheManager" p:configuration="/WEB-INF/config/ehcache3.xml"/> -->
	<!-- <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:configLocation="/WEB-INF/config/ehcache3.xml" /> -->

</beans>